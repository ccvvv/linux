#!/usr/bin/env bash
############################################
proot_management_menu() {
	case ${TMOE_CHROOT} in
	false) TMOE_TIPS_02='' ;;
	*) TMOE_TIPS_02='\nchrootÂú®Êú™umountÂâçremoveÂ∞ÜÂØºËá¥ÂÆø‰∏ªÁ≥ªÁªüÈáçË¶ÅÊï∞ÊçÆË¢´Ê∏ÖÁ©∫' ;;
	esac
	RETURN_TO_WHERE='proot_management_menu'
	CURRENT_DIR="$(pwd)"
	TMOE_CONTAINER_FORTUNE=true
	TMOE_CONTAINER_HITOKOTO=true
	proot_management_menu_en() {
		SELECTED_GNU_LINUX=$(whiptail --title "${DEBIAN_FOLDER}" --menu "CONTAINER_DIR=${DEBIAN_CHROOT_MIN}\nFor non-special circumstances,please do not run rm -rf \${CONTAINER_DIR} manually." 0 50 0 \
			"1" "üå± start ${DEBIAN_FOLDER}" \
			"2" "‚èπÔ∏è kill process" \
			"3" "üêØ startvnc(tiger/tight)" \
			"4" "‚öîÔ∏è startx11vnc" \
			"5" "‚öíÔ∏è startxsdl" \
			"6" "üç¨ novnc(HTML5 VNC client)" \
			"7" "üçπ backup proot container" \
			"8" "üì° readme" \
			"9" "ü•§ install" \
			"10" "üòè umount & remove" \
			"11" "üçÖ space occupation" \
			"0" "üåö Return to previous menu" \
			3>&1 1>&2 2>&3)
	}
	proot_management_menu_cn() {
		SELECTED_GNU_LINUX=$(whiptail --title "${DEBIAN_FOLDER_CAPITAL}" --menu "ÂÆπÂô®Ë∑ØÂæÑ‰∏∫${DEBIAN_CHROOT_MIN}\nÈùûÁâπÊÆäÊÉÖÂÜµ‰∏ã,ËØ∑Âú®Êú¨Â∑•ÂÖ∑ÂÜÖÊ≠£Â∏∏ÁßªÈô§ÂÆπÂô®,ËØ∑ÂãøÊâãÂä®rm -rf \${ÂÆπÂô®Ë∑ØÂæÑ}${TMOE_TIPS_02}" 0 50 0 \
			"1" "üå± ÂêØÂä®${CONTAINER_TYPE} ${DEBIAN_FOLDER}" \
			"2" "‚èπÔ∏è ÂÅúÊ≠¢ÂÆπÂô®ËøõÁ®ã" \
			"3" "üêØ startvnc:ÂêØÂä®tiger/tightvnc" \
			"4" "‚öîÔ∏è startx11vnc:ÂêØÂä®x11vnc" \
			"5" "‚öíÔ∏è startxsdl:ÂêØÂä®xsdl/VcXsrv" \
			"6" "üç¨ ÂêØÂä®novnc:Âú®ÊµèËßàÂô®ÈáåËøûÊé•vnc" \
			"7" "üçπ backup Â§á‰ªΩ${CONTAINER_TYPE}ÂÆπÂô®" \
			"8" "üì° commands ÂëΩ‰ª§ËØ¥Êòé" \
			"9" "ü•§ install ÂÆâË£Ö" \
			"10" "üòè umount & remove Âç∏ËΩΩÂπ∂ÁßªÈô§" \
			"11" "üçÖ space occupation Á©∫Èó¥Âç†Áî®Â§ßÂ∞è" \
			"0" "üåö back ËøîÂõû‰∏äÁ∫ßËèúÂçï" \
			3>&1 1>&2 2>&3)
	}
	case ${TMOE_MENU_LANG} in
	zh_*UTF-8) proot_management_menu_cn ;;
	*) proot_management_menu_en ;;
	esac
	##############################
	case "${SELECTED_GNU_LINUX}" in
	0 | "") ${RETURN_TO_MENU} ;;
	1) normally_start_gnu_linux_distro ;;
	2) kill_container_process ;;
	3) start_gnu_linux_distro_tigervnc ;;
	4) start_gnu_linux_distro_x11vnc ;;
	5) start_gnu_linux_distro_x ;;
	6) install_web_novnc ;;
	7) backup_tmoe_gnu_linux_distro ;;
	8) readme_of_gnu_linux_distro ;;
	9) install_new_tmoe_gnu_linux_distro ;;
	10) umount_and_remove_gnu_linux_distro ;;
	11) du_sh_gnu_linux_distro ;;
	esac
	####################
	case "${SELECTED_GNU_LINUX}" in
	2 | 7 | 8 | 11)
		press_enter_to_return
		proot_management_menu
		;;
	10) ${RETURN_TO_MENU} ;;
	esac
	#Âç∏ËΩΩ‰πãÂêéË¶ÅÂõûÂà∞ÂèëË°åÁâàÈÄâÊã©ËèúÂçïÔºåËÄåÈùûÂΩìÂâçÂèëË°åÁâàËèúÂçï
}
##############################
check_tmoe_container_pid() {
	#EXEC_LSOF=$(sed -n p ${LSOF_TEMP_FILE})
	LIST_OPEN_FILES_COUNTS=$(sed -n p ${LSOF_TEMP_FILE} | awk '{print $1}' | grep -c '^lsof')
	case ${LIST_OPEN_FILES_COUNTS} in
	0)
		LIST_OPEN_FILES=$(sed -n p ${LSOF_TEMP_FILE} | grep "${DEBIAN_CHROOT%/}" | awk '{print $1}' | uniq)
		KILL_PID=$(printf "%s\n" "${LIST_OPEN_FILES}" | sed "s@^@pkill -9 @g")
		;;
	*)
		LIST_OPEN_FILES=$(sed -n p ${LSOF_TEMP_FILE} | grep "${DEBIAN_CHROOT%/}" | awk '{print $2}' | uniq)
		KILL_PID=$(printf "%s\n" "${LIST_OPEN_FILES}" | sed "s@^@kill -9 @g")
		;;
	esac
	PROCESS_ID_AND_NAME=$(sed -n p ${LSOF_TEMP_FILE} | grep "${DEBIAN_CHROOT%/}" | awk '{print $2,$1}' | uniq)
	printf "${PURPLE}"
	cat <<-EOF
		${PROCESS_ID_AND_NAME}
	EOF
	printf "${RESET}"
	printf '%s\n' '--------------------'
	case ${LIST_OPEN_FILES} in
	"") ;;
	*) printf "%s\n" "${KILL_PID}" ;;
	esac
}
##################
tips_of_check_pid() {
	printf "${GREEN}%s ${YELLOW}%s${RESET}\n" "Checking" "process id ..."
	printf "${BLOD}${YELLOW}%s${RESET}" "Ê≠£Âú®Ê£ÄÊµã${DEBIAN_FOLDER}ËøêË°å‰∏≠ÁöÑËøõÁ®ãÔºö"
	LSOF_TEMP_FILE="${TMPDIR}/.lsof.tmp"
	[[ ! -e ${LSOF_TEMP_FILE} ]] || rm -f ${LSOF_TEMP_FILE}
}
##########
tips_of_kill_pid() {
	printf "${RED}%s ${BLUE}%s${RESET}\n" "${PROCESS_ID_AND_NAME}" | sed "s@^@Killed @g"
	printf "${BOLD}${YELLOW}%s\n" "All processes have been killed."
	printf "%s\n" "Â∑≤${RED}ÁªàÊ≠¢${BLUE}${DEBIAN_FOLDER}${RESET}ÂÆπÂô®ËøõÁ®ã"
	[[ ! -e ${LSOF_TEMP_FILE} ]] || rm -f ${LSOF_TEMP_FILE}
}
##########
kill_chroot_container_process() {
	source ${TMOE_SHARE_DIR}/removal/umount
	tips_of_check_pid
	su -c "lsof" >${LSOF_TEMP_FILE}
	#EXEC_LSOF=$(su -c "lsof")
	check_tmoe_container_pid
	su -c "${KILL_PID}"
	tips_of_kill_pid
}
kill_proot_container_process() {
	tips_of_check_pid
	#EXEC_LSOF=$(lsof 2>/dev/null)
	lsof 2>/dev/null >${LSOF_TEMP_FILE}
	check_tmoe_container_pid
	bash -c "${KILL_PID}"
	tips_of_kill_pid
}
################
kill_container_process() {
	#printf "%s\n" "Sorry,Áî±‰∫éÊú¨ÂäüËÉΩÂú®Ë∞ÉËØï‰∏≠Âá∫Áé∞bugÔºåÂõ†Ê¨°Êó†Ê≥ïÂáÜÁ°ÆÂú∞Ê£ÄÊµãÂÆπÂô®ËøõÁ®ã„ÄÇ"
	#printf "%s\n" "Please look forward to the stable version tomorrow."
	case ${TMOE_CHROOT} in
	true) kill_chroot_container_process ;;
	*) kill_proot_container_process ;;
	esac
}
##############
readme_of_gnu_linux_distro() {
	LONG_DISTRO_NAME=$(printf '%s\n' "${TMOE_LINUX_CONTAINER_DISTRO}" | awk -F '-' '{print $1}')
	LONG_DISTRO_CODE=$(printf '%s\n' "${TMOE_LINUX_CONTAINER_DISTRO}" | awk -F '-' '{print $2}')
	case ${LONG_DISTRO_NAME} in
	arch) SHORT_DISTRO_NAME='a' ;;
	alpine) SHORT_DISTRO_NAME='ap' ;;
	armbian) SHORT_DISTRO_NAME='arm' ;;
	centos) SHORT_DISTRO_NAME='c' ;;
	debian) SHORT_DISTRO_NAME='d' ;;
	fedora) SHORT_DISTRO_NAME='f' ;;
	funtoo) SHORT_DISTRO_NAME='ft' ;;
	gentoo) SHORT_DISTRO_NAME='g' ;;
	kali) SHORT_DISTRO_NAME='k' ;;
	mint) SHORT_DISTRO_NAME='mi' ;;
	manjaro) SHORT_DISTRO_NAME='m' ;;
	opensuse) SHORT_DISTRO_NAME='o' ;;
	openwrt) SHORT_DISTRO_NAME='ow' ;;
	raspbios) SHORT_DISTRO_NAME='r' ;;
	slackware) SHORT_DISTRO_NAME='s' ;;
	ubuntu) SHORT_DISTRO_NAME='u' ;;
	void) SHORT_DISTRO_NAME='v' ;;
	*) SHORT_DISTRO_NAME=${LONG_DISTRO_NAME} ;;
	esac
	case ${TMOE_CHROOT} in
	true) SHORT_VIRT_TYPE='c' ;;
	*) SHORT_VIRT_TYPE='p' ;;
	esac
	case "${LONG_DISTRO_CODE}" in
	focal) SHORT_DISTRO_CODE='20.04' ;;
	groovy) SHORT_DISTRO_CODE='20.10' ;;
	sid) SHORT_DISTRO_CODE='s' ;;
	bionic) SHORT_DISTRO_CODE='18.04' ;;
	rolling) SHORT_DISTRO_CODE='r' ;;
	"") SHORT_DISTRO_CODE="" ;;
	*) SHORT_DISTRO_CODE=${LONG_DISTRO_CODE} ;;
	esac
	case ${ARCH_TYPE} in
	amd64) SHORT_ARCH='x' ;;
	arm64) SHORT_ARCH='a' ;;
	armhf) SHORT_ARCH='h' ;;
	armel) SHORT_ARCH='armel' ;;
	i386) SHORT_ARCH='i' ;;
	ppc*) SHORT_ARCH='p' ;;
	s390*) SHORT_ARCH='s390' ;;
	mips64el) SHORT_ARCH='m64' ;;
	mipsel) SHORT_ARCH='m' ;;
	risc*) SHORT_ARCH='risc' ;;
	esac
	cat <<-EOF
		${BOLD}${YELLOW}Full command:${RESET} ${PURPLE}tmoe ${CONTAINER_TYPE} ${LONG_DISTRO_NAME} ${LONG_DISTRO_CODE} ${ARCH_TYPE}${RESET}
		${BOLD}${YELLOW}Simplified command:${RESET}  ${BLUE}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH}${RESET}
		${BOLD}${YELLOW}Start ${DEBIAN_FOLDER} + tigervnc server:${RESET} ${GREEN}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH} v${RESET}
		${BOLD}${YELLOW}Start ${DEBIAN_FOLDER} + x11vnc server:${RESET} ${GREEN}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH} x11${RESET}
		${BOLD}${YELLOW}Start ${DEBIAN_FOLDER} + X server:${RESET} ${GREEN}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH} xs${RESET}
		The default ${YELLOW}login shell${RESET} is ${GREEN}zsh${RESET}, if you want to start ${BLUE}bash${RESET},then type ${GREEN}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH} bash${RESET}
		Start ${BLUE}ash${RESET} as a login shellÔºö  ${GREEN}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH} ash${RESET} 
		--------------------
		ÂêØÂä®${DEBIAN_FOLDER}ÁöÑÂÆåÊï¥ÂëΩ‰ª§‰∏∫ ${PURPLE}tmoe ${CONTAINER_TYPE} ${LONG_DISTRO_NAME} ${LONG_DISTRO_CODE} ${ARCH_TYPE}${RESET}
		Ëã•ÊÇ®Êú™ÈÄâÊã©Ë∑®Êû∂ÊûÑËøêË°åÔºåÂàôÂèØÂéªÈô§${PURPLE}${ARCH_TYPE}${RESET}ÂèÇÊï∞„ÄÇ
		Á≤æÁÆÄÂëΩ‰ª§‰∏∫  ${BLUE}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH}${RESET}
		Ëã•ÊÇ®‰ΩøÁî®ÁöÑÊòØtmoe-zshÈÖçÁΩÆÁöÑÁéØÂ¢ÉÔºåÂàôÂèØ‰ª•Ëøõ‰∏ÄÊ≠•ÁÆÄÂåñ‰∏∫ ${YELLOW}t ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH}${RESET}
		ÂêåÊó∂ÂêØÂä®${BLUE}${DEBIAN_FOLDER}${RESET}ÂÆπÂô®+${YELLOW}tigervnc server${RESET}ÁöÑÂëΩ‰ª§‰∏∫  ${GREEN}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH} v${RESET}
		ÂêåÊó∂ÂêØÂä®${BLUE}${DEBIAN_FOLDER}${RESET}ÂÆπÂô®+${YELLOW}x11vnc server${RESET}ÁöÑÂëΩ‰ª§‰∏∫  ${GREEN}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH} x11${RESET}
		ÂêåÊó∂ÂêØÂä®${BLUE}${DEBIAN_FOLDER}${RESET}ÂÆπÂô®+${YELLOW}XSDL/VcXsrv${RESET}ÁöÑÂëΩ‰ª§‰∏∫  ${GREEN}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH} xs${RESET}
		ÂÆπÂô®ÁöÑÈªòËÆ§${YELLOW}ÁôªÂΩïSHELL${RESET}‰∏∫${GREEN}zsh${RESET},Ëã•ÊÇ®ÈúÄË¶Å‰ΩøÁî®ÂÖ∂ÂÆÉ${YELLOW}shell${RESET}ÔºåÂàôËØ∑‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§
		‰∏¥Êó∂‰ΩøÁî®${GREEN}bash${RESET}‰Ωú‰∏∫${YELLOW}ÁôªÂΩïSHELL${RESET}Ôºö  ${GREEN}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH} bash${RESET}  
		‰∏¥Êó∂‰ΩøÁî®${GREEN}ash${RESET}‰Ωú‰∏∫${YELLOW}ÁôªÂΩïSHELL${RESET}Ôºö  ${GREEN}tmoe ${SHORT_VIRT_TYPE} ${SHORT_DISTRO_NAME} ${SHORT_DISTRO_CODE} ${SHORT_ARCH} ash${RESET} 
		--------------------
		${BOLD}È¢ùÂ§ñÊãìÂ±ïÂäüËÉΩ${RESET}
		${YELLOW}ÔºàË°•ÂÖ®ÂäüËÉΩÔºâ${RESET}ËØ¥Êòé${RESET}
		${YELLOW}shellÁéØÂ¢ÉË¶ÅÊ±Ç${RESET}Ôºö${GREEN}zsh${RESET}
		The completion function exists separately as a zsh plugin, so bash and other shells are not supported.
		‰ªÖÊîØÊåÅ${GREEN}zsh${RESET},${RED}‰∏çÊîØÊåÅ${RESET}${PURPLE}bash${RESET}

		tmoe-zsh‰ºöËá™Âä®Âä†ËΩΩtmoeË°•ÂÖ®Êèí‰ª∂ÔºåÂÖ∂‰ªñÊèí‰ª∂ÁÆ°ÁêÜÂô®ÈúÄË¶ÅÊâãÂä®Âä†ËΩΩ„ÄÇ
		zinitÊèí‰ª∂ÁÆ°ÁêÜÂô®ÈÖçÁΩÆË°•ÂÖ®Êèí‰ª∂Ôºö${GREEN}
		[[ \$(egrep '^[^#]*zinit.*completion/_tmoe' ${HOME}/.zshrc) ]] || sed -i '$ a\zinit ice lucid wait=1 as"completion" && zinit snippet ${TMOE_SHARE_DIR}/completion/_tmoe' ${HOME}/.zshrc
		${RESET}
		Ëá≥‰∫éÂÖ∂‰ªñÊèí‰ª∂ÁÆ°ÁêÜÂô®Ôºå‰æãÂ¶Çoh-my-zshÔºåÂõ†ÂºÄÂèëËÄÖÂπ∂Êú™ËøõË°åÊµãËØïÔºåÊïÖËØ∑Ëá™Ë°åÂä†ËΩΩÊèí‰ª∂„ÄÇ
		${BOLD}${YELLOW}TIPS OF TMOE COMPLETION PLUGIN${RESET}${RESET}
		  1.Âú®TMOE-ZSHÈÖçÁΩÆÁöÑÁéØÂ¢É‰∏ã,Ëæì${YELLOW}t${RESET},Êåâ‰∏ãÁ©∫Ê†º,ÂÜçÊåâ‰∏ãTABÈîÆ${BLUE}‚áÑ${RESET}ËøõË°åË°•ÂÖ®ÔºåËæì${GREEN}/${RESET}ËøõË°åËøûÁª≠Ë°•ÂÖ®ÔºåÂú®ËØ•Ê®°Âºè‰∏ãÊîØÊåÅÊêúÁ¥¢ÂèëË°åÁâàÂêçÁß∞„ÄÇ
		  2.Âú®ÂÖ∂‰ªñÊèí‰ª∂ÁÆ°ÁêÜÂô®ÈÖçÁΩÆÁöÑÁéØÂ¢É‰∏ãÔºåËæìÂÖ•${YELLOW}tmoe${RESET},‰∏çÊåâÂõûËΩ¶,Êåâ‰∏ãTABÈîÆ${BLUE}‚áÑ${RESET}ËøõË°åË°•ÂÖ®.
		  Type ${GREEN}tmoe${RESET}, then don't press ${RED}enter${RESET}, press Tab${BLUE}‚áÑ${RESET} key to complete.
	EOF
}
######
install_web_novnc() {
	source ${TMOE_SHARE_DIR}/app/novnc
}
if_container_is_not_installed() {
	[[ -e ${DEBIAN_CHROOT} ]] || install_new_tmoe_gnu_linux_distro
	case ${DEB_BOOT_STRAP} in
	true) install_new_tmoe_gnu_linux_distro ;;
	esac
}
git_pull_tmoe_linux() {
	cd ${TMOE_GIT_DIR}
	git reset --hard origin/master
	git pull --rebase --stat origin master --allow-unrelated-histories || git rebase --skip
	cd ${CURRENT_DIR}

}
normally_start_gnu_linux_distro() {
	source ${CONFIG_FOLDER}/hitokoto.conf
	case ${TMOE_CONTAINER_FORTUNE} in
	true)
		if [ $(command -v fortune) ]; then
			fortune 2>/dev/null
		elif [ -e /usr/games/fortune ]; then
			/usr/games/fortune 2>/dev/null
		fi
		;;
	esac
	case ${TMOE_CONTAINER_HITOKOTO} in
	true) [[ ! ${TMOE_LANG} =~ zh_.*UTF-8 ]] || get_hitokito_cn ;;
	esac
	if_container_is_not_installed
	cat_release_file
	case $(uname -o) in
	Android) termux-wake-lock 2>/dev/null ;;
	esac
	${TMOE_PREFIX} bash ${DEBIAN_CHROOT}/usr/local/etc/tmoe-linux/container/tmoe-linux-container
}
start_gnu_linux_distro_tigervnc() {
	[[ ! $(command -v am) ]] || am start -n com.realvnc.viewer.android/com.realvnc.viewer.android.app.ConnectionChooserActivity 2>/dev/null
	${TMOE_PREFIX} touch ${DEBIAN_CHROOT}/root/.vnc/startvnc
	normally_start_gnu_linux_distro
}
start_gnu_linux_distro_x11vnc() {
	[[ ! $(command -v am) ]] || am start -n com.realvnc.viewer.android/com.realvnc.viewer.android.app.ConnectionChooserActivity 2>/dev/null
	${TMOE_PREFIX} touch ${DEBIAN_CHROOT}/root/.vnc/startx11vnc
	normally_start_gnu_linux_distro
}
start_gnu_linux_distro_x() {
	[[ ! $(command -v am) ]] || am start -n x.org.server/x.org.server.MainActivity 2>/dev/null
	sleep 3
	${TMOE_PREFIX} touch ${DEBIAN_CHROOT}/root/.vnc/startxsdl
	normally_start_gnu_linux_distro
}
install_new_tmoe_gnu_linux_distro() {
	check_tmoe_completion_version
	check_tmoe_completion
	git_pull_tmoe_linux
	case ${ARCH_TYPE} in
	mips* | risc*) ;;
	*)
		case ${DISTRO_NAME} in
		debian) check_debian_distro_code ;;
		ubuntu) check_ubuntu_distro_code ;;
		kali) install_kali_rolling_gnu_linux_distro ;;
		arch) install_arch_linux_distro ;;
		esac
		;;
	esac
}
umount_and_remove_gnu_linux_distro() {
	kill_container_process
	source ${TMOE_SHARE_DIR}/container/remove
}
du_sh_gnu_linux_distro() {
	case ${TMOE_CHROOT} in
	true)
		printf "%s\n" "Unmounting dirs ..."
		su -c "umount -lvf ${DEBIAN_CHROOT}/* 2>/dev/null"
		su -c "umount -lvf ${DEBIAN_CHROOT}/*/*  2>/dev/null"
		su -c "umount -lvf ${DEBIAN_CHROOT}  2>/dev/null"
		;;
	esac
	printf "%s\n" "Detecting the space occupied by ${BLUE}${DEBIAN_FOLDER}${RESET} ..."
	printf "%s\n" "Ê≠£Âú®Ê£ÄÊµã${BLUE}${DEBIAN_FOLDER}${RESET}Âç†Áî®Á©∫Èó¥Â§ßÂ∞è..."
	case ${TMOE_CHROOT} in
	true)
		if [ -e "${DEBIAN_CHROOT}" ]; then
			cd ${DEBIAN_CHROOT}
			${TMOE_PREFIX} du -sh * 2>/dev/null
			printf "%s\n" "${YELLOW}Ê≠£Âú®ÂàóÂá∫ÊéíË°åÊ¶ú...${RESET}"
			${TMOE_PREFIX} find ./ -type d \( -path="./proc" \
				-o -path="./root/sd" \
				-o -path="./root/tf" \
				-o -path="./root/termux" \
				-o -path="./media/sd" \
				-o -path="./media/termux" \
				-o -path="./media/tf" \
				-o -path="./sd" \
				-o -path="./tf" \
				-o -path="./dev" \
				-o -path="./sys" \
				-o -path="./system" \) -prune \
				-type f -print0 2>/dev/null |
				xargs -0 ${TMOE_PREFIX} du |
				sort -n |
				tail -10 |
				cut -f 2 |
				xargs -I{} ${TMOE_PREFIX} du -sh {}
		else
			printf "${RED}%s${RESET} ${BLUE}%s${RESET}\n" "You did not install" "${DEBIAN_FOLDER}"
		fi
		;;
	*)
		if [ -e "${DEBIAN_CHROOT}" ]; then
			cd ${DEBIAN_CHROOT}
			${TMOE_PREFIX} du -sh *
			printf "%s\n" "${YELLOW}Ê≠£Âú®ÂàóÂá∫TOP30...${RESET}"
			${TMOE_PREFIX} find ./ -type d \( -path="./proc" \
				-o -path="./root/sd" \
				-o -path="./root/tf" \
				-o -path="./root/termux" \
				-o -path="./media/sd" \
				-o -path="./media/termux" \
				-o -path="./media/tf" \
				-o -path="./sd" \
				-o -path="./tf" \
				-o -path="./dev" \
				-o -path="./sys" \
				-o -path="./system" \) -prune \
				-type f -print0 2>/dev/null |
				xargs -0 ${TMOE_PREFIX} du |
				sort -n |
				tail -30 |
				cut -f 2 |
				xargs -I{} ${TMOE_PREFIX} du -sh {}
		else
			printf "${RED}%s${RESET} ${BLUE}%s${RESET}\n" "You did not install" "${DEBIAN_FOLDER}"
		fi
		;;
	esac
}
######################
backup_tmoe_gnu_linux_distro() {
	if [[ ! -e ${DEBIAN_CHROOT} ]]; then
		cat <<-EOF
			ÊÇ®${RED}Â∞öÊú™ÂÆâË£Ö${RESET}${BLUE}${DEBIAN_FOLDER_CAPITAL}${RESET}ÂÆπÂô®
			ÊòØÂê¶‰ΩøÁî®ÊÅ¢Â§çÂÆπÂô®ÁöÑÈÄâÈ°πÔºü
		EOF
		do_you_want_to_continue
		source ${TMOE_SHARE_DIR}/compression/restore
	else
		source ${TMOE_SHARE_DIR}/compression/backup
	fi
}
#####################
proot_management_menu $@
